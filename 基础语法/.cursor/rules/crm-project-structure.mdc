---
description:
globs:
alwaysApply: false
---
# CRM项目结构与配置规则

## 项目目录结构详细说明

```
crm-system/
├── .cursor/                    # Cursor配置
│   └── rules/                 # 规则文件
├── public/                    # 静态资源
│   ├── icons/                # 图标文件
│   └── images/               # 图片资源
├── src/
│   ├── api/                  # API接口层
│   │   ├── modules/          # 按业务模块分组
│   │   │   ├── customer.ts   # 客户相关API
│   │   │   ├── opportunity.ts # 销售机会API
│   │   │   ├── contact.ts    # 联系人API
│   │   │   ├── task.ts       # 任务API
│   │   │   └── report.ts     # 报表API
│   │   ├── types/            # API类型定义
│   │   └── request.ts        # 请求封装
│   ├── components/           # 组件库
│   │   ├── common/           # 通用组件
│   │   │   ├── DataTable/    # 数据表格组件
│   │   │   ├── SearchForm/   # 搜索表单组件
│   │   │   ├── StatusTag/    # 状态标签组件
│   │   │   └── DatePicker/   # 日期选择器
│   │   ├── customer/         # 客户相关组件
│   │   │   ├── CustomerCard.vue
│   │   │   ├── CustomerForm.vue
│   │   │   └── CustomerFilter.vue
│   │   ├── opportunity/      # 销售机会组件
│   │   │   ├── OpportunityCard.vue
│   │   │   ├── SalesFunnel.vue
│   │   │   └── OpportunityForm.vue
│   │   ├── charts/           # 图表组件
│   │   │   ├── SalesChart.vue
│   │   │   ├── PieChart.vue
│   │   │   └── LineChart.vue
│   │   └── layout/           # 布局组件
│   │       ├── MainLayout.vue
│   │       ├── Sidebar.vue
│   │       └── Header.vue
│   ├── views/                # 页面组件
│   │   ├── dashboard/        # 仪表板
│   │   │   ├── index.vue
│   │   │   └── components/
│   │   ├── customer/         # 客户管理
│   │   │   ├── list.vue      # 客户列表
│   │   │   ├── detail.vue    # 客户详情
│   │   │   ├── create.vue    # 新建客户
│   │   │   └── edit.vue      # 编辑客户
│   │   ├── opportunity/      # 销售机会
│   │   │   ├── list.vue
│   │   │   ├── detail.vue
│   │   │   ├── kanban.vue    # 看板视图
│   │   │   └── pipeline.vue  # 销售漏斗
│   │   ├── contact/          # 联系人管理
│   │   ├── task/             # 任务管理
│   │   ├── report/           # 报表分析
│   │   └── settings/         # 系统设置
│   ├── stores/               # 状态管理
│   │   ├── modules/          # 按模块分组
│   │   │   ├── customer.ts
│   │   │   ├── opportunity.ts
│   │   │   ├── contact.ts
│   │   │   ├── task.ts
│   │   │   └── user.ts
│   │   └── index.ts          # Store入口
│   ├── router/               # 路由配置
│   │   ├── modules/          # 路由模块
│   │   │   ├── customer.ts
│   │   │   ├── opportunity.ts
│   │   │   └── dashboard.ts
│   │   ├── guards/           # 路由守卫
│   │   └── index.ts
│   ├── utils/                # 工具函数
│   │   ├── format.ts         # 格式化工具
│   │   ├── validate.ts       # 验证工具
│   │   ├── date.ts           # 日期工具
│   │   ├── currency.ts       # 货币工具
│   │   └── permission.ts     # 权限工具
│   ├── types/                # TypeScript类型
│   │   ├── api.ts            # API类型
│   │   ├── customer.ts       # 客户类型
│   │   ├── opportunity.ts    # 机会类型
│   │   ├── contact.ts        # 联系人类型
│   │   └── common.ts         # 通用类型
│   ├── styles/               # 样式文件
│   │   ├── variables.scss    # SCSS变量
│   │   ├── mixins.scss       # SCSS混入
│   │   └── global.scss       # 全局样式
│   ├── assets/               # 资源文件
│   │   ├── images/
│   │   └── fonts/
│   ├── composables/          # 组合式函数
│   │   ├── useCustomer.ts
│   │   ├── useOpportunity.ts
│   │   ├── usePermission.ts
│   │   └── useTable.ts
│   ├── directives/           # 自定义指令
│   ├── plugins/              # 插件配置
│   ├── App.vue               # 根组件
│   └── main.ts               # 入口文件
├── tests/                    # 测试文件
│   ├── unit/                 # 单元测试
│   ├── e2e/                  # 端到端测试
│   └── fixtures/             # 测试数据
├── docs/                     # 项目文档
│   ├── api.md                # API文档
│   ├── deployment.md         # 部署文档
│   └── development.md        # 开发文档
├── .env.example              # 环境变量示例
├── .gitignore
├── package.json
├── vite.config.ts
├── tsconfig.json
├── unocss.config.ts
└── README.md
```

## 核心配置文件

### package.json 依赖配置
```json
{
  "name": "crm-system",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc && vite build",
    "preview": "vite preview",
    "test": "vitest",
    "test:e2e": "playwright test",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix",
    "type-check": "vue-tsc --noEmit"
  },
  "dependencies": {
    "vue": "^3.4.0",
    "vue-router": "^4.2.0",
    "pinia": "^2.1.0",
    "element-plus": "^2.4.0",
    "axios": "^1.6.0",
    "echarts": "^5.4.0",
    "@vueuse/core": "^10.5.0",
    "dayjs": "^1.11.0",
    "lodash-es": "^4.17.21"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^4.5.0",
    "typescript": "^5.0.0",
    "vite": "^5.0.0",
    "unocss": "^0.57.0",
    "vitest": "^0.34.0",
    "@vue/test-utils": "^2.4.0",
    "eslint": "^8.50.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "prettier": "^3.0.0"
  }
}
```

### vite.config.ts 配置
```typescript
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import UnoCSS from 'unocss/vite'
import { resolve } from 'path'

export default defineConfig({
  plugins: [
    vue(),
    UnoCSS()
  ],
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src')
    }
  },
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  },
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          'element-plus': ['element-plus'],
          'echarts': ['echarts'],
          'vue-vendor': ['vue', 'vue-router', 'pinia']
        }
      }
    }
  }
})
```

### tsconfig.json 配置
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
```

## CRM特定的类型定义

### 客户类型定义
```typescript
// src/types/customer.ts
export interface Customer {
  id: string
  name: string
  company: string
  email: string
  phone: string
  status: CustomerStatus
  source: CustomerSource
  tags: string[]
  assignedTo: string
  createdAt: string
  updatedAt: string
  lastContactDate?: string
  totalValue: number
  opportunities: Opportunity[]
}

export enum CustomerStatus {
  LEAD = 'lead',
  PROSPECT = 'prospect',
  CUSTOMER = 'customer',
  INACTIVE = 'inactive'
}

export enum CustomerSource {
  WEBSITE = 'website',
  REFERRAL = 'referral',
  SOCIAL_MEDIA = 'social_media',
  COLD_CALL = 'cold_call',
  TRADE_SHOW = 'trade_show'
}
```

### 销售机会类型定义
```typescript
// src/types/opportunity.ts
export interface Opportunity {
  id: string
  title: string
  customerId: string
  value: number
  currency: string
  stage: OpportunityStage
  probability: number
  expectedCloseDate: string
  actualCloseDate?: string
  description: string
  assignedTo: string
  createdAt: string
  updatedAt: string
}

export enum OpportunityStage {
  QUALIFICATION = 'qualification',
  NEEDS_ANALYSIS = 'needs_analysis',
  PROPOSAL = 'proposal',
  NEGOTIATION = 'negotiation',
  CLOSED_WON = 'closed_won',
  CLOSED_LOST = 'closed_lost'
}
```

## 环境变量配置

### .env.example
```bash
# 应用配置
VITE_APP_TITLE=CRM客户关系管理系统
VITE_APP_VERSION=1.0.0
VITE_APP_ENV=development

# API配置
VITE_API_BASE_URL=http://localhost:8080/api
VITE_API_TIMEOUT=10000

# 认证配置
VITE_JWT_SECRET_KEY=your-jwt-secret-key
VITE_TOKEN_EXPIRES_IN=7d

# 第三方服务
VITE_UPLOAD_URL=http://localhost:8080/upload
VITE_WEBSOCKET_URL=ws://localhost:8080/ws

# 功能开关
VITE_ENABLE_MOCK=true
VITE_ENABLE_DEVTOOLS=true
VITE_ENABLE_PWA=false
```

## Git配置

### .gitignore
```bash
# 依赖
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# 构建产物
dist/
dist-ssr/
*.local

# 环境变量
.env
.env.local
.env.*.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# 操作系统
.DS_Store
Thumbs.db

# 日志
logs/
*.log

# 测试覆盖率
coverage/

# 临时文件
.temp/
.cache/
```

## ESLint配置

### .eslintrc.js
```javascript
module.exports = {
  root: true,
  env: {
    node: true,
    browser: true,
    es2022: true
  },
  extends: [
    'eslint:recommended',
    '@vue/typescript/recommended',
    '@vue/prettier',
    '@vue/prettier/@typescript-eslint'
  ],
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: 'module'
  },
  rules: {
    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/no-explicit-any': 'warn',
    'vue/multi-word-component-names': 'off',
    'vue/no-unused-vars': 'error'
  }
}
```

## 开发工作流

### 分支管理策略
- `main`: 生产环境分支
- `develop`: 开发环境分支
- `feature/*`: 功能开发分支
- `hotfix/*`: 紧急修复分支
- `release/*`: 发布准备分支

### 提交信息规范
```bash
# 功能开发
feat(customer): 添加客户搜索功能

# 问题修复
fix(opportunity): 修复销售机会金额计算错误

# 文档更新
docs(api): 更新API文档

# 样式调整
style(ui): 调整客户卡片样式

# 重构代码
refactor(store): 重构客户状态管理

# 性能优化
perf(table): 优化大数据量表格渲染性能

# 测试相关
test(customer): 添加客户模块单元测试
```

这个项目结构规则文件将帮助AI更好地理解项目的组织方式和配置要求。
