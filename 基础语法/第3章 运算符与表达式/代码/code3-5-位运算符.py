"""
第3章 运算符与表达式 - 位运算符
功能：演示位运算符的使用，包括按位与、或、异或、取反、移位操作
重点：二进制运算、&、|、^、~、<<、>>运算符
注意：位运算是在二进制层面进行的操作
"""

# ==================== 按位与运算符 & ====================
print("=== 按位与运算符 & ===")

# 按位与运算：两个位都为1时结果才为1
"""
二进制计算过程：
  101  (5的二进制)
& 111  (7的二进制)
-----
  101  (结果：5)
"""
result1 = 5 & 7
print(f"5 & 7 = {result1}")  # 输出：5

# ==================== 按位或运算符 | ====================
print("\n=== 按位或运算符 | ===")

# 按位或运算：两个位有一个为1时结果就为1
"""
二进制计算过程：
  011  (3的二进制)
| 100  (4的二进制)
-----
  111  (结果：7)
"""
result2 = 3 | 4
print(f"3 | 4 = {result2}")  # 输出：7

# ==================== 按位异或运算符 ^ ====================
print("\n=== 按位异或运算符 ^ ===")

# 按位异或运算：两个位不同时结果为1，相同时结果为0
"""
二进制计算过程：
  010  (2的二进制)
^ 100  (4的二进制)
-----
  110  (结果：6)
"""
result3 = 2 ^ 4
print(f"2 ^ 4 = {result3}")  # 输出：6

# ==================== 按位取反运算符 ~ ====================
print("\n=== 按位取反运算符 ~ ===")

# 按位取反运算：将每一位取反（0变1，1变0）
# 注意：Python中使用补码表示，~x = -(x+1)
"""
二进制计算过程（简化说明）：
  00000001  (1的二进制，32位表示)
~ --------
  11111110  (取反后，补码表示为-2)
"""
result4 = ~1
print(f"~1 = {result4}")  # 输出：-2

# ==================== 左移运算符 << ====================
print("\n=== 左移运算符 << ===")

# 左移运算：将二进制位向左移动指定位数，右边补0
"""
二进制计算过程：
   101    (5的二进制)
<< 2位
--------
  10100   (结果：20，相当于乘以2²)
"""
result5 = 5 << 2
print(f"5 << 2 = {result5}")  # 输出：20

# ==================== 右移运算符 >> ====================
print("\n=== 右移运算符 >> ===")

# 右移运算：将二进制位向右移动指定位数，左边补0（正数）或1（负数）
"""
二进制计算过程：
  10100   (20的二进制)
>> 2位
--------
   101    (结果：5，相当于除以2²)
"""
result6 = 20 >> 2
print(f"20 >> 2 = {result6}")  # 输出：5

# ==================== 位运算的实际应用 ====================
print("\n=== 位运算应用示例 ===")

# 判断奇偶数（利用最低位特性）
num = 7
if num & 1:
    print(f"{num} 是奇数")  # 最低位为1表示奇数
else:
    print(f"{num} 是偶数")  # 最低位为0表示偶数

# 快速计算2的幂次方
power_of_2 = 1 << 3  # 相当于2³
print(f"2³ = {power_of_2}")  # 输出：8
